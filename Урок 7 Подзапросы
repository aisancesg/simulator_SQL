--здесь 7.N - это 7-ой урок, шаг N-ый. (а "задача" это N-1-ая)
--7.2
select
  round(avg(orders_count), 2) as orders_avg
from
  (
    select user_id,
      count(DISTINCT order_id) as orders_count
    from
      user_actions
    group by
      user_id
  ) as t;
  
--7.3
/*
WITH subquery_1 AS (
    SELECT column_1, column_2
    FROM table
    )

SELECT column_1
FROM subquery_1 

Оператор WITH может содержать несколько табличных выражений, 
причём к указанным ранее выражениям можно обращаться в последующих выражениях:

WITH subquery_1 AS (
    SELECT column_1, column_2, column_3
    FROM table
    ),
     subquery_2 AS (
    SELECT column_1, column_2
    FROM subquery_1
    )

SELECT column_1
FROM subquery_2
*/

WITH subquery_1 AS (
    SELECT user_id, COUNT(order_id) AS orders_count
    FROM user_actions
    WHERE action='create_order'
    GROUP BY user_id
    )
SELECT ROUND(AVG(orders_count), 2) as orders_avg
FROM subquery_1;

--7.4
SELECT product_id, name, price
FROM products
WHERE price!=(SELECT MIN(price) FROM products)
ORDER BY product_id desc;

--7.5
SELECT product_id, name, price
FROM products
WHERE price - 20 >= (SELECT AVG(price) FROM products)
ORDER BY product_id desc;

--7.6 !!! 
/*WITH 
    subquery_2 AS ( 
    SELECT user_id, MAX(time) as latest_time, COUNT(order_id) AS orders_count 
    FROM user_actions
    WHERE action='create_order'
    GROUP BY user_id
    HAVING COUNT(order_id)>=1
    )
SELECT COUNT(user_id) AS users_count
FROM subquery_2
WHERE latest_time BETWEEN (SELECT MAX(time) FROM user_actions) AND (SELECT MAX(time) FROM user_actions)-INTERVAL '1 week'
;


SELECT COUNT(user_id) AS users_count
FROM (
    WITH subquery_1 AS ( 
    SELECT MAX(time)
    FROM user_actions
    )
    SELECT user_id, MAX(time) as latest_time, COUNT(order_id) AS orders_count 
    FROM user_actions
    WHERE action='create_order'
    GROUP BY user_id
    HAVING COUNT(order_id)>=1 AND MAX(time) BETWEEN subquery_1 - INTERVAL '1 week' AND subquery_1
    ) as t;

SELECT COUNT(user_id) AS users_count
FROM
WHERE
GROUP BY ;*/

SELECT COUNT(user_id) AS users_count
FROM (
    SELECT user_id, MAX(time), COUNT(DISTINCT order_id)
    FROM user_actions
    GROUP BY user_id
    HAVING MAX(time) >= (SELECT MAX(time) FROM user_actions) - INTERVAL '1 week'
) AS t;

--Вариант верного решения
SELECT count(distinct user_id) as users_count
FROM   user_actions
WHERE  action = 'create_order'
   and time > (SELECT max(time)
            FROM   user_actions) - interval '1 week';
            
--7.7
SELECT MIN(AGE((SELECT MAX(time)::DATE FROM courier_actions), birth_date))::VARCHAR AS min_age
FROM couriers
WHERE sex='male';

--7.8
SELECT order_id
FROM user_actions
WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action='cancel_order')
ORDER BY order_id
LIMIT 1000;

--7.9
WITH subquery AS (
    SELECT ROUND((COUNT(order_id) FILTER (WHERE action='create_order')) ::DECIMAL / COUNT(DISTINCT user_id), 2)
    FROM user_actions
    )
SELECT 
    user_id, 
    COUNT(order_id) AS orders_count,
    (SELECT * FROM subquery) AS orders_avg,
    COUNT(order_id)-(SELECT * FROM subquery) AS orders_diff
FROM user_actions
WHERE action='create_order'
GROUP BY user_id
ORDER BY user_id
LIMIT 1000;

--Вариант верного решения
with t1 as (SELECT user_id,
                   count(order_id) as orders_count
            FROM   user_actions
            WHERE  action = 'create_order'
            GROUP BY user_id)
SELECT user_id,
       orders_count,
       round((SELECT avg(orders_count)
       FROM   t1), 2) as orders_avg, orders_count - round((SELECT avg(orders_count)
                                                    FROM   t1), 2) as orders_diff
FROM   t1
ORDER BY user_id limit 1000;

--7.10
SELECT order_id, product_ids
FROM orders
WHERE order_id IN (
    SELECT order_id 
    FROM  courier_actions
    WHERE action='deliver_order'
    ORDER BY time desc
    LIMIT 100)
ORDER BY order_id;

--7.11
SELECT courier_id, birth_date, sex
FROM couriers
WHERE courier_id IN (
    SELECT courier_id
    FROM courier_actions
    WHERE action='deliver_order' AND DATE_TRUNC('month', time)='2022-09-01' 
    GROUP BY courier_id
    HAVING COUNT(DISTINCT order_id)>=30
    )
ORDER BY courier_id;

--7.12
SELECT 
    product_id, 
    name, 
    price,
    CASE 
    WHEN price >= (SELECT ROUND(AVG(price),2) FROM products)+50 THEN price*0.85
    WHEN price <= (SELECT ROUND(AVG(price),2) FROM products)-50 THEN price*0.9
    ELSE price
    END AS new_price
FROM products
ORDER BY price DESC, product_id ASC;

--SELECT ROUND(AVG(price),2) FROM products

--7.13
/*
SELECT unnest(ARRAY['one','two','three'])

Результат:
one
two
three

Если бы в исходной таблице помимо списка был столбец с каким-либо значением, то это значение автоматически проставилось бы напротив значений в каждой образовавшейся строке:
SELECT 'row', unnest(ARRAY['one','two','three'])

Результат:
row    one
row    two
row    three
*/
SELECT creation_time, order_id, product_ids, unnest(product_ids) as product_id
FROM orders
LIMIT 100;

--7.14 определите 10 самых популярных товаров в таблице orders

SELECT 
    unnest(product_ids) as product_id, 
    COUNT(*) as times_purchased
FROM orders
GROUP BY unnest(product_ids)
ORDER BY 2 DESC
LIMIT 10;

--7.15 !!!
--Из таблицы orders выведите id и содержимое заказов, которые включают хотя бы один из пяти самых дорогих товаров, доступных в нашем сервисе
WITH unnested_orders AS (
    SELECT order_id, unnest(product_ids) AS prod_id
    FROM orders)
SELECT 
    order_id,
    product_ids
FROM 
    orders
WHERE order_id IN (SELECT order_id FROM unnested_orders WHERE prod_id IN (SELECT product_id
    FROM products
    ORDER BY price desc
    LIMIT 5) )
ORDER BY order_id;

--Вариант верного решения
with top_products as (
    SELECT product_id
    FROM   products
    ORDER BY price desc 
    limit 5),
    unnest as (
    SELECT order_id, product_ids, unnest(product_ids) as product_id
    FROM   orders)
SELECT DISTINCT order_id, product_ids
FROM   unnest
WHERE  product_id in (SELECT * FROM   top_products)
ORDER BY order_id


--7.16
--Посчитайте возраст каждого пользователя в таблице users. Возраст измерьте числом полных лет, как мы делали в прошлых уроках. Возраст считайте относительно последней даты в таблице user_actions. В результат включите колонки с id пользователя и возрастом. Для тех пользователей, у которых в таблице users не указана дата рождения, укажите среднее значение возраста всех остальных пользователей, округлённое до целого числа. 
SELECT 
    user_id,
    CASE
    WHEN birth_date IS NOT NULL
    THEN DATE_PART('year', AGE((SELECT MAX(time) FROM user_actions), birth_date))::INTEGER 
    ELSE 
        (SELECT ROUND(AVG(DATE_PART('year', AGE((SELECT MAX(time) FROM user_actions), birth_date))::DECIMAL) FILTER (WHERE birth_date IS NOT NULL), 0)
        FROM users)
    END AS age
FROM users
ORDER BY user_id;
--Вариант верного решения
WITH users_age as 
    (SELECT
        user_id,
        date_part('year', age((SELECT max(time) FROM user_actions), birth_date)) as age
    FROM users)
SELECT user_id,
       coalesce(age, (SELECT round(avg(age)) FROM users_age)) as age
FROM   users_age
ORDER BY user_id;


